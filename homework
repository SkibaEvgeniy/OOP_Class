class Student:
    students_list = []
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        Student.students_list.append(self)
 
    def add_courses(self, course_name):
        self.finished_courses.append(course_name)  

    def rate_hw(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'   

    def _average_assessment(self):
        hw_grades = 0
        counter = 0
        for key, value in self.grades.items():
            hw_grades += sum(value)
            counter += len(value)
        return round(hw_grades / counter, 2)

    def beat_up(self, another):
        if not isinstance(another, Student):
            return 
        if another._average_assessment() < self._average_assessment():
            return f'У {another.surname} средний бал меньше, чем у {self.surname}.'
        elif another._average_assessment() > self._average_assessment():
            return f'У {self.surname} средний бал меньше, чем у {another.surname}.'
        else:
            return f'У {self.surname} и у {another.surname} средний бал равен.'

    def __lt__(self, other):
        if not isinstance(other, Student):
            return
        return self._average_assessment() < other._average_assessment()    

    def __str__(self):
        progress = ', '.join(self.courses_in_progress)
        finish = ', '.join(self.finished_courses)
        output = f'Имя: {self.name }\nФамилия: {self.surname}\nСредняя оценка за домашние задания: {self._average_assessment()}\nКурсы в процессе обучения: {progress}\nЗавершенные курсы: {finish}'
        return(output) 


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

        
class Lecturer(Mentor):
    lecturer_list = []
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
        Lecturer.lecturer_list.append(self)

    def _average_assessment(self):
        hw_grades = 0
        for value in self.grades.values():
            hw_grades += sum(value)
        return round(hw_grades / len(value), 2)

 
    def beat_up(self, another):
        if not isinstance(another, Lecturer):
            return 
        if another._average_assessment() < self._average_assessment():
            return f'У {another.surname} средний бал меньше, чем у {self.surname}.'
        elif another._average_assessment() > self._average_assessment():
            return f'У {self.surname} средний бал меньше, чем у {another.surname}.'
        else:
            return f'У {self.surname} и у {another.surname} средний бал равен.'

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return
        return self._average_assessment() < other._average_assessment()    

    def __str__(self):
        output = f'Имя: {self.name }\nФамилия: {self.surname}\nСредняя оценка за лекции: {self._average_assessment()}'
        return(output)    


class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress or course in student.finished_courses:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        output = f'Имя: {self.name}\nФамилия: {self.surname}'
        return(output)   
             
Jackson = Student('Harris', 'Jackson', 'm')                            # Студенты
Jackson.courses_in_progress += ['Python', 'Git']
Jackson.finished_courses += ['Введение в программирование']
Hohnson = Student('Bryce', 'Hohnson', 'm')
Hohnson.courses_in_progress += ['Python', 'Git']
Hohnson.finished_courses += ['Введение в программирование']
Allen = Student('Peter', 'Allen', 'm')
Allen.courses_in_progress += ['Python', 'Git']
Allen.finished_courses += ['Введение в программирование']

Wilson = Reviewer('Kingsley', 'Wilson')                                # Проверяющие
Wilson.courses_attached = ['Python']
Martin = Reviewer('Robin', 'Martin')
Martin.courses_attached = ['Git']

Rodriguez = Lecturer('Cooper', 'Rodriguez')                            # Преподаватели
Rodriguez.courses_attached += ['Python']
Lewis = Lecturer('Westin', 'Lewis')
Lewis.courses_attached += ['Python']
Garcia = Lecturer('Tate', 'Garcia')
Garcia.courses_attached += ['Git']

Wilson.rate_hw(Jackson, 'Python', 9)                                   # Выставление оценок студентам
Wilson.rate_hw(Jackson, 'Python', 7)
Wilson.rate_hw(Jackson, 'Python', 8)
Wilson.rate_hw(Hohnson, 'Python', 6)
Wilson.rate_hw(Hohnson, 'Python', 7)
Wilson.rate_hw(Hohnson, 'Python', 5)
Wilson.rate_hw(Allen, 'Python', 9)
Wilson.rate_hw(Allen, 'Python', 10)
Wilson.rate_hw(Allen, 'Python', 9)

Martin.rate_hw(Jackson, 'Git', 9)
Martin.rate_hw(Jackson, 'Git', 10)
Martin.rate_hw(Jackson, 'Git', 8)
Martin.rate_hw(Hohnson, 'Git', 7)
Martin.rate_hw(Hohnson, 'Git', 8)
Martin.rate_hw(Hohnson, 'Git', 5)
Martin.rate_hw(Allen, 'Git', 9)
Martin.rate_hw(Allen, 'Git', 10)
Martin.rate_hw(Allen, 'Git', 10)

Jackson.rate_hw(Rodriguez, 'Python', 9)                                # Выставление оценок преподавателям
Jackson.rate_hw(Rodriguez, 'Python', 8)
Hohnson.rate_hw(Rodriguez, 'Python', 7)
Hohnson.rate_hw(Rodriguez, 'Python', 6)
Allen.rate_hw(Rodriguez, 'Python', 10)
Allen.rate_hw(Rodriguez, 'Python', 10)
Jackson.rate_hw(Lewis, 'Python', 8)
Jackson.rate_hw(Lewis, 'Python', 9)
Hohnson.rate_hw(Lewis, 'Python', 6)
Hohnson.rate_hw(Lewis, 'Python', 5)
Allen.rate_hw(Lewis, 'Python', 10)
Allen.rate_hw(Lewis, 'Python', 9)
Jackson.rate_hw(Garcia, 'Git', 8)
Jackson.rate_hw(Garcia, 'Git', 9)
Hohnson.rate_hw(Garcia, 'Git', 8)
Hohnson.rate_hw(Garcia, 'Git', 9)
Allen.rate_hw(Garcia, 'Git', 10)
Allen.rate_hw(Garcia, 'Git', 10)

print()
print(Martin)
print()
print(Rodriguez)
print()
print(Jackson)
print()
print(Rodriguez.beat_up(Lewis))
print()
print(Hohnson.beat_up(Jackson))
print()
print(Jackson.__lt__(Hohnson))
print()
print(Lewis.__lt__(Rodriguez))
print()

def average_assessment_st(students_list, course):
    sum_ = []
    for student in Student.students_list:
        if course in student.courses_in_progress or course in student.finished_courses:
            for grades in student.grades.get(course):
                sum_.append(grades)
    medium = sum(sum_) / len(sum_)
    summary = round(medium, 2)
    return print(f'Средняя оценка за домашние задания по всем студентам в рамках курса {course}: {summary}')

def average_assessment_lec(lecturer_list, course):
    sum_ = []
    for lecturer in Lecturer.lecturer_list:
        if course in lecturer.courses_attached:
            for grades in lecturer.grades.get(course):
                sum_.append(grades)
    medium = sum(sum_) / len(sum_)
    summary = round(medium, 2)
    return print(f'Средняя оценка за лекции всех лекторов в рамках курса {course}: {summary}')

average_assessment_st(Student.students_list, 'Git') 
print() 
average_assessment_lec(Lecturer.lecturer_list, 'Git')
